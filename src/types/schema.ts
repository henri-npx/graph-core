// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Factory extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Factory entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Factory must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Factory", id.toString(), this);
    }
  }

  static load(id: string): Factory | null {
    return changetype<Factory | null>(store.get("Factory", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get vaultCount(): i32 {
    let value = this.get("vaultCount");
    return value!.toI32();
  }

  set vaultCount(value: i32) {
    this.set("vaultCount", Value.fromI32(value));
  }

  get vaults(): Array<string> {
    let value = this.get("vaults");
    return value!.toStringArray();
  }

  set vaults(value: Array<string>) {
    this.set("vaults", Value.fromStringArray(value));
  }
}

export class Vault extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Vault entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Vault must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Vault", id.toString(), this);
    }
  }

  static load(id: string): Vault | null {
    return changetype<Vault | null>(store.get("Vault", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get factory(): string {
    let value = this.get("factory");
    return value!.toString();
  }

  set factory(value: string) {
    this.set("factory", Value.fromString(value));
  }

  get vault(): Bytes {
    let value = this.get("vault");
    return value!.toBytes();
  }

  set vault(value: Bytes) {
    this.set("vault", Value.fromBytes(value));
  }

  get creator(): Bytes {
    let value = this.get("creator");
    return value!.toBytes();
  }

  set creator(value: Bytes) {
    this.set("creator", Value.fromBytes(value));
  }

  get share(): Bytes {
    let value = this.get("share");
    return value!.toBytes();
  }

  set share(value: Bytes) {
    this.set("share", Value.fromBytes(value));
  }

  get tokens(): Array<Bytes> {
    let value = this.get("tokens");
    return value!.toBytesArray();
  }

  set tokens(value: Array<Bytes>) {
    this.set("tokens", Value.fromBytesArray(value));
  }

  get accManagementFeesToDAO(): BigInt {
    let value = this.get("accManagementFeesToDAO");
    return value!.toBigInt();
  }

  set accManagementFeesToDAO(value: BigInt) {
    this.set("accManagementFeesToDAO", Value.fromBigInt(value));
  }

  get accPerformanceFeesToDAO(): BigInt {
    let value = this.get("accPerformanceFeesToDAO");
    return value!.toBigInt();
  }

  set accPerformanceFeesToDAO(value: BigInt) {
    this.set("accPerformanceFeesToDAO", Value.fromBigInt(value));
  }

  get accManagementFeesToStrategists(): BigInt {
    let value = this.get("accManagementFeesToStrategists");
    return value!.toBigInt();
  }

  set accManagementFeesToStrategists(value: BigInt) {
    this.set("accManagementFeesToStrategists", Value.fromBigInt(value));
  }

  get accPerformanceFeesToStrategists(): BigInt {
    let value = this.get("accPerformanceFeesToStrategists");
    return value!.toBigInt();
  }

  set accPerformanceFeesToStrategists(value: BigInt) {
    this.set("accPerformanceFeesToStrategists", Value.fromBigInt(value));
  }

  get deposits(): Array<string> {
    let value = this.get("deposits");
    return value!.toStringArray();
  }

  set deposits(value: Array<string>) {
    this.set("deposits", Value.fromStringArray(value));
  }

  get rebalances(): Array<string> {
    let value = this.get("rebalances");
    return value!.toStringArray();
  }

  set rebalances(value: Array<string>) {
    this.set("rebalances", Value.fromStringArray(value));
  }

  get redemptions(): Array<string> {
    let value = this.get("redemptions");
    return value!.toStringArray();
  }

  set redemptions(value: Array<string>) {
    this.set("redemptions", Value.fromStringArray(value));
  }

  get depositsCount(): i32 {
    let value = this.get("depositsCount");
    return value!.toI32();
  }

  set depositsCount(value: i32) {
    this.set("depositsCount", Value.fromI32(value));
  }

  get rebalancesCount(): i32 {
    let value = this.get("rebalancesCount");
    return value!.toI32();
  }

  set rebalancesCount(value: i32) {
    this.set("rebalancesCount", Value.fromI32(value));
  }

  get redemptionsCount(): i32 {
    let value = this.get("redemptionsCount");
    return value!.toI32();
  }

  set redemptionsCount(value: i32) {
    this.set("redemptionsCount", Value.fromI32(value));
  }

  get managementFeesHarvests(): Array<string> {
    let value = this.get("managementFeesHarvests");
    return value!.toStringArray();
  }

  set managementFeesHarvests(value: Array<string>) {
    this.set("managementFeesHarvests", Value.fromStringArray(value));
  }

  get performanceFeesHarvests(): Array<string> {
    let value = this.get("performanceFeesHarvests");
    return value!.toStringArray();
  }

  set performanceFeesHarvests(value: Array<string>) {
    this.set("performanceFeesHarvests", Value.fromStringArray(value));
  }
}

export class Deposit extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Deposit entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Deposit must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Deposit", id.toString(), this);
    }
  }

  static load(id: string): Deposit | null {
    return changetype<Deposit | null>(store.get("Deposit", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get vault(): string {
    let value = this.get("vault");
    return value!.toString();
  }

  set vault(value: string) {
    this.set("vault", Value.fromString(value));
  }

  get from(): Bytes {
    let value = this.get("from");
    return value!.toBytes();
  }

  set from(value: Bytes) {
    this.set("from", Value.fromBytes(value));
  }

  get baseTokenAmountIn(): BigInt {
    let value = this.get("baseTokenAmountIn");
    return value!.toBigInt();
  }

  set baseTokenAmountIn(value: BigInt) {
    this.set("baseTokenAmountIn", Value.fromBigInt(value));
  }

  get sharesMinted(): BigInt {
    let value = this.get("sharesMinted");
    return value!.toBigInt();
  }

  set sharesMinted(value: BigInt) {
    this.set("sharesMinted", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get sharePriceAfter(): BigInt {
    let value = this.get("sharePriceAfter");
    return value!.toBigInt();
  }

  set sharePriceAfter(value: BigInt) {
    this.set("sharePriceAfter", Value.fromBigInt(value));
  }
}

export class Redeem extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Redeem entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Redeem must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Redeem", id.toString(), this);
    }
  }

  static load(id: string): Redeem | null {
    return changetype<Redeem | null>(store.get("Redeem", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get vault(): string {
    let value = this.get("vault");
    return value!.toString();
  }

  set vault(value: string) {
    this.set("vault", Value.fromString(value));
  }

  get from(): Bytes {
    let value = this.get("from");
    return value!.toBytes();
  }

  set from(value: Bytes) {
    this.set("from", Value.fromBytes(value));
  }

  get shareBurned(): BigInt {
    let value = this.get("shareBurned");
    return value!.toBigInt();
  }

  set shareBurned(value: BigInt) {
    this.set("shareBurned", Value.fromBigInt(value));
  }

  get amountReceived(): BigInt {
    let value = this.get("amountReceived");
    return value!.toBigInt();
  }

  set amountReceived(value: BigInt) {
    this.set("amountReceived", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get sharePriceAfter(): BigInt {
    let value = this.get("sharePriceAfter");
    return value!.toBigInt();
  }

  set sharePriceAfter(value: BigInt) {
    this.set("sharePriceAfter", Value.fromBigInt(value));
  }
}

export class Rebalance extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Rebalance entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Rebalance must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Rebalance", id.toString(), this);
    }
  }

  static load(id: string): Rebalance | null {
    return changetype<Rebalance | null>(store.get("Rebalance", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get vault(): string {
    let value = this.get("vault");
    return value!.toString();
  }

  set vault(value: string) {
    this.set("vault", Value.fromString(value));
  }

  get from(): Bytes {
    let value = this.get("from");
    return value!.toBytes();
  }

  set from(value: Bytes) {
    this.set("from", Value.fromBytes(value));
  }

  get currentSignals(): Array<BigInt> {
    let value = this.get("currentSignals");
    return value!.toBigIntArray();
  }

  set currentSignals(value: Array<BigInt>) {
    this.set("currentSignals", Value.fromBigIntArray(value));
  }

  get desiredSignals(): Array<BigInt> {
    let value = this.get("desiredSignals");
    return value!.toBigIntArray();
  }

  set desiredSignals(value: Array<BigInt>) {
    this.set("desiredSignals", Value.fromBigIntArray(value));
  }

  get recordedSignals(): Array<BigInt> {
    let value = this.get("recordedSignals");
    return value!.toBigIntArray();
  }

  set recordedSignals(value: Array<BigInt>) {
    this.set("recordedSignals", Value.fromBigIntArray(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get sharePriceAfter(): BigInt {
    let value = this.get("sharePriceAfter");
    return value!.toBigInt();
  }

  set sharePriceAfter(value: BigInt) {
    this.set("sharePriceAfter", Value.fromBigInt(value));
  }
}

export class HarvestManagementFees extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save HarvestManagementFees entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type HarvestManagementFees must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("HarvestManagementFees", id.toString(), this);
    }
  }

  static load(id: string): HarvestManagementFees | null {
    return changetype<HarvestManagementFees | null>(
      store.get("HarvestManagementFees", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get vault(): string {
    let value = this.get("vault");
    return value!.toString();
  }

  set vault(value: string) {
    this.set("vault", Value.fromString(value));
  }

  get from(): Bytes {
    let value = this.get("from");
    return value!.toBytes();
  }

  set from(value: Bytes) {
    this.set("from", Value.fromBytes(value));
  }

  get amountToDAO(): BigInt {
    let value = this.get("amountToDAO");
    return value!.toBigInt();
  }

  set amountToDAO(value: BigInt) {
    this.set("amountToDAO", Value.fromBigInt(value));
  }

  get amountToStrategist(): BigInt {
    let value = this.get("amountToStrategist");
    return value!.toBigInt();
  }

  set amountToStrategist(value: BigInt) {
    this.set("amountToStrategist", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }
}

export class HarvestPerformanceFees extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save HarvestPerformanceFees entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type HarvestPerformanceFees must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("HarvestPerformanceFees", id.toString(), this);
    }
  }

  static load(id: string): HarvestPerformanceFees | null {
    return changetype<HarvestPerformanceFees | null>(
      store.get("HarvestPerformanceFees", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get vault(): string {
    let value = this.get("vault");
    return value!.toString();
  }

  set vault(value: string) {
    this.set("vault", Value.fromString(value));
  }

  get from(): Bytes {
    let value = this.get("from");
    return value!.toBytes();
  }

  set from(value: Bytes) {
    this.set("from", Value.fromBytes(value));
  }

  get amountToDAO(): BigInt {
    let value = this.get("amountToDAO");
    return value!.toBigInt();
  }

  set amountToDAO(value: BigInt) {
    this.set("amountToDAO", Value.fromBigInt(value));
  }

  get amountToStrategist(): BigInt {
    let value = this.get("amountToStrategist");
    return value!.toBigInt();
  }

  set amountToStrategist(value: BigInt) {
    this.set("amountToStrategist", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }
}

export class RewardDistributor extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save RewardDistributor entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type RewardDistributor must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("RewardDistributor", id.toString(), this);
    }
  }

  static load(id: string): RewardDistributor | null {
    return changetype<RewardDistributor | null>(
      store.get("RewardDistributor", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get accRewards(): BigInt {
    let value = this.get("accRewards");
    return value!.toBigInt();
  }

  set accRewards(value: BigInt) {
    this.set("accRewards", Value.fromBigInt(value));
  }

  get distributionsCount(): i32 {
    let value = this.get("distributionsCount");
    return value!.toI32();
  }

  set distributionsCount(value: i32) {
    this.set("distributionsCount", Value.fromI32(value));
  }

  get distributions(): Array<string> {
    let value = this.get("distributions");
    return value!.toStringArray();
  }

  set distributions(value: Array<string>) {
    this.set("distributions", Value.fromStringArray(value));
  }
}

export class RewardDistribution extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save RewardDistribution entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type RewardDistribution must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("RewardDistribution", id.toString(), this);
    }
  }

  static load(id: string): RewardDistribution | null {
    return changetype<RewardDistribution | null>(
      store.get("RewardDistribution", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get index(): i32 {
    let value = this.get("index");
    return value!.toI32();
  }

  set index(value: i32) {
    this.set("index", Value.fromI32(value));
  }

  get distributor(): string {
    let value = this.get("distributor");
    return value!.toString();
  }

  set distributor(value: string) {
    this.set("distributor", Value.fromString(value));
  }

  get totalAmountRewarded(): BigInt {
    let value = this.get("totalAmountRewarded");
    return value!.toBigInt();
  }

  set totalAmountRewarded(value: BigInt) {
    this.set("totalAmountRewarded", Value.fromBigInt(value));
  }

  get tokenRewardedWith(): Bytes {
    let value = this.get("tokenRewardedWith");
    return value!.toBytes();
  }

  set tokenRewardedWith(value: Bytes) {
    this.set("tokenRewardedWith", Value.fromBytes(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }
}

export class UserReward extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save UserReward entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type UserReward must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("UserReward", id.toString(), this);
    }
  }

  static load(id: string): UserReward | null {
    return changetype<UserReward | null>(store.get("UserReward", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get user(): Bytes {
    let value = this.get("user");
    return value!.toBytes();
  }

  set user(value: Bytes) {
    this.set("user", Value.fromBytes(value));
  }

  get accUserRewards(): BigInt {
    let value = this.get("accUserRewards");
    return value!.toBigInt();
  }

  set accUserRewards(value: BigInt) {
    this.set("accUserRewards", Value.fromBigInt(value));
  }

  get rewardedAtPeriods(): Array<i32> {
    let value = this.get("rewardedAtPeriods");
    return value!.toI32Array();
  }

  set rewardedAtPeriods(value: Array<i32>) {
    this.set("rewardedAtPeriods", Value.fromI32Array(value));
  }

  get rewardsPerPeriods(): Array<BigInt> {
    let value = this.get("rewardsPerPeriods");
    return value!.toBigIntArray();
  }

  set rewardsPerPeriods(value: Array<BigInt>) {
    this.set("rewardsPerPeriods", Value.fromBigIntArray(value));
  }
}
