type Factory @entity {
  id: ID!
  vaultCount: Int!
  vaults: [Vault!]! @derivedFrom(field: "factory")
}

type Vault @entity {
  id: ID!
  factory: Factory!
  vault: Bytes! # address
  creator: Bytes! # address
  deposits: [Deposit!]! @derivedFrom(field: "vault")
  rebalances: [Rebalance!]! @derivedFrom(field: "vault")
  redemptions: [Redeem!]! @derivedFrom(field: "vault")
}

type Share @entity {
  id: ID!
  totalSupply: BigInt!
  symbol: String!
  name: String!
  decimals: BigInt!
}

type Deposit @entity {
  id: ID!
  vault: Vault!
  from: Bytes,
  netAmountOut: BigInt!
  toMint:BigInt!
  timestamp: BigInt!
}

# to redemptions
type Redeem @entity {
  id: ID!
  vault: Vault!
  from: Bytes,
  amountIn: BigInt!
  timestamp: BigInt!
}

type Rebalance @entity {
  id: ID!
  vault: Vault!
  from: Bytes,
  signals: [BigInt!]!
  timestamp: BigInt!
}

# type HarvestManagementFees @entity {
#   id: ID!
#   vault: Vault!
#   fromHarvester: Bytes,
#   feesToDAO: BigInt!
#   feesToStrategist: BigInt!
# }

# type HarvestPerformanceFees @entity {
#   id: ID!
#   vault: Vault!
#   fromHarvester: Bytes,
#   feesToDAO: BigInt!
#   feesToStrategist: BigInt!
# }




# type OwnershipTransferred @entity {
#   id: ID!
#   previousOwner: Bytes! # address
#   newOwner: Bytes! # address
# }

# type SetAccessManager @entity {
#   id: ID!
#   newAccessManager: Bytes! # address
# }

# type SetFeesManager @entity {
#   id: ID!
#   newFeesManager: Bytes! # address
# }

# type SetHarvester @entity {
#   id: ID!
#   newHarvester: Bytes! # address
# }

# type SetSwapContracts @entity {
#   id: ID!
#   newSwapRouter: Bytes! # address
#   newSwapProxy: Bytes! # address
# }
